Step 1: Start Consul and Vault.
Step 2: Configure and store secrets in Vault.
Step 3: Start Snipe-IT and associated services.


$ mkdir snipeit-vault
$ cd snipeit-vault

#################################################################################################
## consul-vault
################################################################################################

vim consul-vault.yml


services:
  consul:
    image: hashicorp/consul:1.20
    container_name: consul
    ports:
      - '8500:8500'        # Consul UI
      - '8600:8600/udp'     # DNS for Consul
    command: 'agent -dev -client=0.0.0.0'
    volumes:
      - consul-data:/consul/data
    environment:
      CONSUL_BIND_INTERFACE: eth0
    networks:
      - consul-vault-net
    restart: unless-stopped
#
  vault:
    image: hashicorp/vault:1.18
    container_name: vault
    ports:
      - '8200:8200'         # Vault API/UI
    environment:
      VAULT_LOCAL_CONFIG: |
        {
          "backend": {
            "consul": {
              "address": "consul:8500",     # Consul link for storage
              "path": "vault/"              # Data stored under 'vault/' prefix in Consul
            }
          },
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",    # Vault listens on this port
              "tls_disable": 1              # Disable TLS for simplicity (use TLS in production)
            }
          },
          "default_lease_ttl": "168h",
          "max_lease_ttl": "720h"
        }
    volumes:
      - vault-data:/vault/file              # Persistent data storage for Vault
    cap_add:
      - IPC_LOCK                            # Extra security for Vault
    depends_on:
      - consul                              # Vault starts after Consul
    networks:
      - consul-vault-net
    restart: unless-stopped

volumes:
  consul-data:
  vault-data:

networks:
  consul-vault-net:
    driver: bridge



## docker compose -f consul-vault.yml up -d   


#################################################################################################
## Snipe-IT App with MariaDB and phpMyAdmin
################################################################################################

services:
  snipeit-mysql:
    image: linuxserver/mariadb:10.11.8
    container_name: snipeit-db
    restart: unless-stopped
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - '3301:3306'            # Database port
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - snipeit-net
    deploy:
      resources:
        limits:
          cpus: '1.0'          # Limit to 1 CPU
          memory: 512M         # Limit to 512MB RAM
#
#
  phpmyadmin:
    image: phpmyadmin:5.2.1-apache
    container_name: phpMyAdmin
    restart: unless-stopped
    ports:
      - '9002:80'              # phpMyAdmin port
    environment:
      PMA_HOST: snipeit-mysql  # MariaDB hostname
      PMA_PORT: 3306
    depends_on:
      - snipeit-mysql
    networks:
      - snipeit-net
    deploy:
      resources:
        limits:
          cpus: '0.5'          # Limit to 0.5 CPU
          memory: 512M         # Limit to 512MB RAM
#
#
  snipeit-app:
    image: linuxserver/snipe-it:7.0.11
    container_name: snipeit-app
    restart: unless-stopped
    volumes:
      - app-data:/var/lib/snipeit
    ports:
      - '9000:80'              # Snipe-IT app port
    depends_on:
      snipeit-mysql:
        condition: service_healthy
    env_file:
      - /etc/secrets/snipeit.env   # Inject secrets (from Vault Agent)
    networks:
      - snipeit-net
    deploy:
      resources:
        limits:
          cpus: '1.5'          # Limit to 1.5 CPUs
          memory: 1G           # Limit to 1GB RAM
#
# Vault Agent to inject secrets
  vault-agent:
    image: hashicorp/vault:1.18
    container_name: vault-agent
    volumes:
      - ./vault-agent.hcl:/vault-agent/config.hcl
      - /etc/secrets:/etc/secrets
    command: vault agent -config=/vault-agent/config.hcl
    depends_on:
      - vault
    networks:
      - snipeit-net
#
volumes:
  mysql-data:
  app-data:
#
networks:
  snipeit-net:
    driver: bridge

#
#
#
#
#
#
#
#
#
#
#
####################################################################################################
####[DOCKER HOST]#####


# 1 - CREATE VAULT AGENT CONFIGURATIONS 

Create a file named agent.hcl in your host machine under ~/vault/config/.
touch vault-agent.hcl    # CONTAINER MAPPING FILE

# Example "agent.hcl" Configuration:

vault {
  address = "http://vault:8200"
}

auto_auth {
  method "token" {
    config = {
      token = "root"  # In production, replace this with a secure auth method (e.g., AppRole or Kubernetes auth)
    }
  }
}

template {
  source      = "/vault/templates/db-creds.ctmpl"
  destination = "/etc/secrets/db-creds.env"
  perms       = "0644"       # Ensure the file is readable by the app
}

template {
  source      = "/vault/templates/mail-creds.ctmpl"
  destination = "/etc/secrets/mail-creds.env"
  perms       = "0644"
}



####################################################################################################
# 2 - VAULT TEMPLATES FOR SECRETS .ctmpl  [ templates with the Vault Agent ]

# Create Database Credentials Template

mkdir -p vault/templates
touch vault/templates/db-creds.ctmpl

# Database Credentials Template (db-creds.ctmpl):

DB_USERNAME="{{ with secret "secret/data/snipeit-mysql" }}{{ .Data.data.username }}{{ end }}"
DATABASE="{{ with secret "secret/data/snipeit-mysql" }}{{ .Data.data.database }}{{ end }}"
DB_PASSWORD="{{ with secret "secret/data/snipeit-mysql" }}{{ .Data.data.password }}{{ end }}"


# Mail Credentials Template (mail-creds.ctmpl):
touch vault/templates/mail-creds.ctmpl

MAIL_USERNAME="{{ with secret "secret/data/mail" }}{{ .Data.data.username }}{{ end }}"
MAIL_PASSWORD="{{ with secret "secret/data/mail" }}{{ .Data.data.password }}{{ end }}"


#


# Start Consul and Vault
docker compose -f consul-vault.yml up -d




##########################################################################

# Initialize Vault > Access the Vault container:
docker exec -it vault /bin/sh

# vault status
 vault status


# initialize vault cluster
vault operator init


# Copy the unseal keys and root token generated.


# Unseal Vault
vault operator unseal <unseal_key_1>
vault operator unseal <unseal_key_2>
vault operator unseal <unseal_key_3>


# unseal vault with three secret shares
vault operator unseal


# Login to Vault:
vault login <root_token>


# Enable KV Secrets Engine
vault secrets enable -path=secret kv-v2


# Store MariaDB Secrets:
vault kv put secret/snipeit-mysql username="sam" password="password" database="snipeit"
vault kv put secret/mail username="sam@gmail.com" password="password"


# ------------------------------------------------------

# Start Snipe-IT, MariaDB, and phpMyAdmin
docker-compose -f snipeit.yml up -d








#################################
recommended sequence 


# 1. Setup Directory Structure | Create a working directory for your project:###############
mkdir snipeit-vault
cd snipeit-vault

# 2. Setup Consul and Vault Services | Create the consul-vault.yml file for Docker Compose:##################
vim consul-vault.yml

# Define Consul and Vault services in the YAML file as described. | Start Consul and Vault Services: ###############
docker compose -f consul-vault.yml up -d

# 3. Initialize Vault ##########################

#Access the Vault container:
docker exec -it vault /bin/sh

#Check Vault status:
vault status


#Initialize Vault:  ## Copy and save the unseal keys and root token from the output
vault operator init


#Unseal Vault using the three unseal keys:
vault operator unseal <unseal_key_1>
vault operator unseal <unseal_key_2>
vault operator unseal <unseal_key_3>


#Login to Vault using the root token:
vault login <root_token>

# 4. Enable Vault KV Secrets Engine ####

#Enable KV Secrets Engine:
vault secrets enable -path=secret kv-v2


#Store MariaDB and Mail Secrets:
vault kv put secret/snipeit-mysql username="sam" password="password" database="snipeit"
vault kv put secret/mail username="sam@gmail.com" password="password"


## 5. Create Vault Agent Configuration ######

#Create the Vault Agent configuration file (vault-agent.hcl):
#Define the configuration for auto-auth and template rendering.
mkdir -p ~/vault/config/
touch ~/vault/config/vault-agent.hcl




## 6. Create Vault Templates ###

#Create templates for secrets (.ctmpl files):

#Database Credentials Template (db-creds.ctmpl):
mkdir -p vault/templates
touch vault/templates/db-creds.ctmpl


#Mail Credentials Template (mail-creds.ctmpl):
touch vault/templates/mail-creds.ctmpl

#Define the template content as shown in the previous steps.


# 7. Setup Snipe-IT, MariaDB, and phpMyAdmin Services
# Create the Docker Compose file for Snipe-IT, MariaDB, and phpMyAdmin:


vim docker-compose-snipeit.yml
#Define the services with the correct volumes, environment variables, and resource limits.


# 8. Add Vault Agent to Inject Secrets
#Add the Vault Agent service in your docker-compose-snipeit.yml to inject secrets into environment files.


#9. Start Snipe-IT, MariaDB, and phpMyAdmin Services
#Start the services using Docker Compose:

docker-compose -f docker-compose-snipeit.yml up -d


#10. Monitor and Test Services
#Check logs for Vault Agent, Snipe-IT, MariaDB, and other services to ensure the environment variables are injected correctly and services are running as expected:

docker logs vault-agent
docker logs snipeit-app

