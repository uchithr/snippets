

nmcli connection add con-name NIC type Ethernet ifname eth0
nmcli connection modify NIC ipv4.addresses "172.25.8.11/24 172.25.0.254" ipv4.dns 172.25.254.254 ipv4.method static connection.autoconnect yes
nmcli connection down "System eth0" ; nmcli connection up NIC

nmtui

##################################################################################################################
## NETWORK AUTOCONNECT     #######################################################################################
##################################################################################################################

# ENABLE NETWORKMANAGER SERVICE
sudo systemctl enable NetworkManager
sudo systemctl start NetworkManager

# CONFIGURE THE NETWORK INTERFACE
nmcli device
nmcli connection modify <interface> connection.autoconnect yes
nmcli connection show <interface>


 # VERIFY NETWORKMANAGER CONFIGURATION
/etc/NetworkManager/system-connections/<interface>

[connection]
autoconnect=true

#TEST AND REBOOT
sudo systemctl restart NetworkManager
sudo reboot


##################################################################################################################
## DNS ###########################################################################################################
##################################################################################################################
#  CHECK DNS FORM CMD
whois slvr.com

#DNS
cat /etc/resolv.conf
sudo vim /etc/hosts >> 10.0.0.198 slvr.site dns

# BIND DNS SERVER
sudo yum install bind bind-utils -y

sudo vim /etc/named.conf


# ADD DNS NAME WITH IP
sudo vim /etc/hosts >> 10.0.0.198 slvr.site dns

############################################################
#### DATE/TIME ####
############################################################

sudo timedatectl set-time 14:30:00
sudo timedatectl set-time 2024-09-25
sudo timedatectl set-time '2024-09-25 14:30:00'

sudo timedatectl set-ntp false



############################################################
#### VIM ####
############################################################

# DELETE ENTIRE LINE (must be in non-insert mode)
$ dd

# MULTIPLE LINES DELETION (deletes the current line and the next two lines)
$ 3dd  

# LINEWISE SELECTION
$ Shit + V 



############################################################
#### FIND ####
############################################################

# FOLDER FIND	
find ~ -type d -name "Documents"

# FIND  FILE TYPE	
find . -type f -name "*.txt"

# FIND AND COPY	
find -name  myfile.mp3 -exec cp  {}  /home/sam  \;

## FIND AND COPY BELOW 200M FILES	
find -type f -size -200M -exec cp {} /mnt/sdf2/1/X_pks \;
find /etc/ -name "passwd"

# SEARCH FOR FILES NAMED 'RCLONE' STARTING FROM THE /USR/BIN DIRECTORY
find /usr/bin -name rclone 2>/dev/null

## FIND
find / -name rclone 2>/dev/null

# SEARCH FOR FILES NAMED 'RCLONE' STARTING FROM THE /USR/BIN DIRECTORY
find /usr/bin -name rclone 2>/dev/null


## LIST ISO FILES IN ALL SUBDIRECTORIES
find /path/to/directory -type f -name "*.iso"

## FOR BETTER READABILITY WITH FILE SIZES
find /path/to/directory -type f -name "*.iso" -exec ls -lh {} +



############################################################
#### WI-FI ####
############################################################


# WLAN CONFIGS LOCATION
/etc/network/interfaces OR  /etc/wpa_supplicant/wpa_supplicant.conf

## WLAN SCAN
$ sudo iwlist wlan0 scan

## CONVERT WIFI PASSWORD TO HASH ## WPA2
$ wpa_passphrase <SSID> <password>     # wpa_passphrase MyWiFiNetwork 'mySecretPassword'

network={
    ssid="MyWiFiNetwork"
    psk=04b8fgrdfgd3fe269045fvvvcvdgfdcvc1d6c583aa1bedb22d2cfa0f17
}

## CONVERT WIFI PASSWORD TO HASH ## WPA3
wpa_passphrase <SSID> <password> | grep "sae_password=" | sed 's/\tsae_password=//'

network={
    ssid="YourNetworkSSID"
    key_mgmt=SAE
    psk="<SAE password generated from the previous step>"
}


## LOGIN TO WIFI
$ sudo iwlist wlan0 scan
$ sudo nmcli device wifi connect <SSID> password <password>
$ sudo nmcli device disconnect wlan0
$ nmcli device status


## GENERATE  WI-FI QR
$ sudo dnf install qrencode
$ qrencode "WIFI:S:<SSID>;T:WPA;P:<PASSWORD>;;" -d=150 -s 30 -o file1.png

## WAKE ON LAN
$ sudo ethtool ens160 | grep -i wake-on
 if pumg doesnt shows use below to enable
$ sudo ethtool -s enp0s25 wol g


############################################################
#### GRUB ####
############################################################

##PASSWORD RESET

Press "e" for edit  kernel
Use "Esc" for UEFI enabled systems. (interrupt boot process)

linux 16 line and end of UTF-8 type > rd.break > Press Ctrl+X

# mount -o remount,rw /sysroot
# chroot /sysroot
# passwd root
# touch /.autorelabel

exit
exit

------------------------------------------------

## RESCUING A NONBOOTING SYSTEM FROM THE  [grub> Prompt]
grub> ls
grub> ls (hd0,2)/boot
grub> set root=(hd0,2)
grub> linux /boot/vmlinuz-5.3.18-lp152.57-default root=/dev/sda2
grub> initrd /boot/initrd-5.3.18-lp152.57-default
grub> boot

## RESCUING A NONBOOTING SYSTEM FROM THE [grub rescue> Prompt]
grub rescue> ls (hd0,2)/boot
grub rescue> set prefix=(hd0,2)/boot/grub
grub rescue> set root=(hd0,2)
grub rescue> insmod normal
grub rescue> insmod linux

rub> linux /boot/vmlinuz-5.3.18-lp152.57-default root=/dev/sda2
grub> initrd /boot/initrd-5.3.18-lp152.57-default
grub> boot


## REINSTALLING YOUR GRUB CONFIGURATION {permanent repair}
$ sudo grub-mkconfig -o /boot/grub/grub.cfg
$ sudo grub-install /dev/sda


# RECOVERING AN OEM WINDOWS 8 OR 10 PRODUCT KEY
$ sudo cat /sys/firmware/acpi/tables/MSDM
MSDMU
DELL CBX3
AMI
FAKEP-RODUC-TKEY1-22222-33333



############################################################
#### USER CONFIGURATION ####
############################################################

## USER ADD & ELEVATE
useradd sam -c "sam fisher"
passwd sam

usermod -aG wheel sam
su - sam
sudo vim /etc/passwd > make [root:x:0:0:root:/root:/sbin/nologin]
id sam
uid=1001(sam) gid=1001(sam) groups=1001(sam),10(wheel)

sudo chage -l sam
sudo chage -E +1month sam
sudo chage -l sam

sudo usermod -s /sbin/nologin student
cat /etc/passwd | grep student
student:x:1000:1000:student:/home/student:/sbin/nologin

## TO TEMPORARILY DEACTIVATE AN ACCOUNT
$ sudo passwd -l stash
passwd: password expiry information changed.


## TO ACTIVATE AN ACCOUNT
$ sudo passwd -u stash
passwd: password expiry information changed


## TO COMPLETELY DISABLE A USER ACCOUNT (WHEN USING SSH KEYS)
$ sudo usermod --expiredate 1 stash


## TO ACTIVATE AN ACCOUNT
$ sudo usermod --expiredate -1 stash



## FILE AUTH TO OTHERS
touch myfile

ll
-rw-rw-r--. 1 sam sam 0 Jan 28 06:28 myfile

chmod o+w myfile

ll
-rw-rw-rw-. 1 sam sam 0 Jan 28 06:28 myfile



################################################################################################################################################################################################
#### FILE PERMISSIONS ####
################################################################################################################################################################################################

sudo mkdir /Finance

sudo ls -ald /Finance/
drwxr-xr-x. 2 root root 6 Jan 28 12:36 /Finance/

sudo groupadd HR
sudo chgrp HR /Finance/


 id sam
uid=1001(sam) gid=1001(sam) groups=1001(sam),10(wheel)

sudo usermod -aG HR sam

id sam
uid=1001(sam) gid=1001(sam) groups=1001(sam),10(wheel),1002(HR)
---

sudo ls -ald /Finance/
drwxr-xr-x. 2 root HR 6 Jun 9 12:19 /Finance/


sudo chown sam myfile
sudo chown sam.HR myfile

ll
-rw-rw-rw-. 1 sam HR 0 Jan 28 06:28 myfile

sudo chgrp HR myfile
sudo chgrp hrgrp /HRDATA ## change root grop to hrgrp
sudo chmod g+w,o-wr /HRDATA ## remove other access


getfacl /HRDATA
# file: HRDATA
# owner: root
# group: hrgrp
user::rwx
group::rwx
other::--x

sudo setfacl -R -m u:sam:rwx /HRDATA ## SAM can access all files
sudo setfacl -x u:sam:rwx /HRDATA ## Remove execute feature from SAM

getfacl /HRDATA
# file: HRDATA
# owner: root
# group: hrgrp
user::rwx
user:sam:rwx
group::rwx
mask::rwx
other::--x

sudo setfacl -m g:itgrp:rwx /HRDATA ## itgrp can access all files

getfacl /HRDATA
# file: HRDATA
# owner: root
# group: hrgrp
user::rwx
user:sam:rwx
group::rwx
group:itgrp:rwx
mask::rwx
other::--x


sudo setfacl -R -m g:hrgrp:rwx /HRDATA ## For existing files
sudo setfacl -m g:hrgrp:rwx /HRDATA ## For new files

################################################################################################################################################################################################
### SSH KEYGEN
################################################################################################################################################################################################

sudo dnf install openssh-server openssh-clients
sudo systemctl enable sshd
sudo systemctl start sshd

# firewall-cmd --zone=public --permanent --add-service=ssh
# firewall-cmd --reload


# GENERATE THE SSH KEY PAIR (on your local machine)
$ ssh-keygen -t rsa -b 4096 -C "bob@gmail.com" # OR any comment

# CHECK THE GENERATED KEY FILES (on your local machine)
$ ls -l ~/.ssh/   # id_rsa (private key) and id_rsa.pub (public key)

# COPY THE PUBLIC KEY TO THE SERVER (from your local machine)
$ ssh-copy-id username@server_ip

# OR MANUALLY TRANSFER THE PUBLIC KEY (from your local machine)
$ scp ~/.ssh/my_id_rsa.pub username@server_ip:/home/username/.ssh/authorized_keys

# LOG INTO THE SERVER
$ ssh username@server_ip

# ON THE SERVER: CREATE THE .ssh DIRECTORY AND AUTHORIZED_KEYS FILE (if not already done by ssh-copy-id)
$ mkdir -p ~/.ssh
$ chmod 700 ~/.ssh
$ cd .ssh/
$ cat my_id_rsa.pub >> ~/.ssh/authorized_keys
$ chmod 600 ~/.ssh/authorized_keys

# ENSURE CORRECT OWNERSHIP
$ chown -R username:username ~/.ssh

# DISABLE PASSWORD AUTHENTICATION (on the server)
$ sudo nano /etc/ssh/sshd_config

# Update or add the following lines:
  PubkeyAuthentication yes                # Enable public key authentication #45
  AuthorizedKeysFile .ssh/authorized_keys # Specify the file with public keys #49
  PasswordAuthentication no               # Disable password authentication #65

$ Ctrl + O #writeout
$ Ctrl + X #exit

# RESTART THE SSH SERVICE (on the server)
$ sudo systemctl restart sshd

# IMPROVE SECURITY WITH FAIL2BAN (OPTIONAL)
$ sudo dnf install epel-release -y 
$ sudo dnf install fail2ban -y
$ sudo systemctl enable fail2ban
$ sudo systemctl start fail2ban




################################################################################################################################################################################################
#### FILE COMPRESSION
################################################################################################################################################################################################

## 7-ZIP
sudo dnf install epel-release
sudo dnf install p7zip p7zip-plugins

# EXTRACT 7z.001 FILE
sudo 7z x 'test.7z.001'

# ZIP SINGLE FILE	
zip -r -s 500m myzip myfile.mkv

# ZIP FOLDER WITH ZERO COMPRESSION WITH 500M SPLIT	 (0-9)
zip -0 -r -s 500m output/myzip source/

# UZIP FILE	unzip file.zip
cat cloud_dump.zip.* > cloud_dump.zip
unzip cloud_dump.zip

# RAR FILE	

# UNRAR FILE	
unrar e 'REV.part01.rar' rev-fgr

# IF RAR ARCHIVE IS PASSWORD-PROTECTED:
unrar x -pPASSWORD file.rar


## MAKE TAR FILE	
tar cvf /home/sam/hrdata_bkp.tar /HRDATA 

## UNTAR  FILE	
tar xvf hrdata_bkp.tar

## LIST OR VIEW FILE INFORMATION WITHOUT EXTRACT
unzip -l zip_file1.zip
unrar l rar_file1.rar

## TEST FILE INTEGRITY
$ unzip -t your_file.zip
$ unrar t your_file.rar

####___________

<>p4txz!p

tar cvzf - test | split --bytes=15MB - name.tar.gz. [work]

tar xz name.tar.gz.

# ENCRYPT
tar -czf - test | split --bytes=15MB | openssl enc -e -aes256 -out tarball.tar.gz.

# DECRYPT
openssl enc -d -aes256 -in tarball.tar.gz.* | tar xz -C /root/Desktop/out/
-------------
# TO tar + gpg + split
$ tar -cJvpf - test | gpg --symmetric --cipher-algo aes256 | split -d -b 10MB - name.tar.xz.gpg. 

# TO DECRYPT:
$ cat outputfile.tar.xz.gpg.* | gpg -d | tar -xJvpf -

cat filelist.txt | xargs -I % cp /path/to/source/folder/% /path/to/destination/folder/
for /f "delims=" %i in (filelist.txt) do copy "C:\path\to\source\folder\%i" "C:\path\to\destination\folder\"

#_#_____

The best way to compress a folder in Linux server with splitting and password protection would be to use the tar command along with the gzip compression algorithm. Here's an example command that you can use:

$ tar -czvf - /path/to/folder | split -b 100M -d -a 4 - file.tar.gz.part_ && openssl enc -aes-256-cbc -salt -in file.tar.gz.part_* -out archive.tar.gz.enc

-c: create a new archive |*| -z: use gzip compression |*| -v: verbose while creating |*| -f: specifies the filename of the archive.
split: split a large file into smaller ones.
-b: size of each split file.
-d: split to use numeric suffixes for the split files.
-a: length of the suffixes (4)


################################################################################################################################################################################################
#### APACHE
################################################################################################################################################################################################

sudo mkdir /web/site_1 -p

sudo touch index.html
sudo vim index.html


ls -lZd /var/www/html

man semanage fcontext
sudo semanage fcontext -a -t httpd_sys_content_t "/web(/.*)?"
sudo restorecon -R -v /web


sudo yum install httpd httpd-manual -y

sudo systemctl enable httpd.service
sudo systemctl start httpd.service

sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --reload


sudo vim /etc/httpd/conf.d/v_hosting.conf

###
<VirtualHost *:80>
DocumentRoot /web/site_1
ServerName server.example.com
ErrorLog logs/server-error_log
TransferLog logs/server-access_log
</VirtualHost>


<Directory /web/site_1>
Require all granted
</Directory>
###

httpd -t > Syntax OK


sudo vim /etc/httpd/conf/httpd.conf ## LINE 119


###
DocumentRoot "/web"

#
# Relax access to content within /var/www.

<Directory "/web">
AllowOverride None
# Allow open access:
Require all granted
</Directory>

# Further relax access to the default document root:
<Directory "/web">
###


sudo systemctl reload httpd.service
curl server.example.com


(Redirect 301 / http://slvr.lk)





################################################################################################################################################################################################
#### CRONTAB
###############################################################################################################################################################################################

## SHUT DOWN IN 10 MINUTES WITH NOTIFICATIONS
$ shutdown -h +10
$ shutdown -h 22:15

## CREATING SCHEDULED SHUTDOWNS WITH CRON
$ sudo nano /etc/crontab
m  h  dom mon dow user command
10 22 *   *    *  root /sbin/shutdown -h +20

Table of crontab values
minute         0-59
hour           0-23
day of month   1-31
month          1-12
day of week    0-7


crontab -l
timedatectl

date
Thu Jan 28 08:47:39 EST 2021

pwd
/home/sam

ls
Desktop HRDATA hrdata_bkp.tar usage_script.sh

cp usage_script.sh /home/sam/HRDATA/

crontab -e
crontab -l
00 09 * * * cp /home/sam/usage_script.sh /home/sam/HRDATA/


################################################################################################################################################################################################
#### LVM
################################################################################################################################################################################################

sudo fdisk /dev/vdb


Command (m for help): n #####
Partition type:
p primary (0 primary, 0 extended, 4 free)
e extended
Select (default p): p ####
Partition number (1-4, default 1): 1 ####
First sector (2048-10485759, default 2048): ####
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-10485759, default 10485759): +1G ####
Partition 1 of type Linux and of size 1 GiB is set

Command (m for help): t ####
Selected partition 1
Hex code (type L to list all codes): 8e ####
Changed type of partition 'Linux' to 'Linux LVM'

Command (m for help): w ####
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.

sudo fdisk /dev/vdb


Command (m for help): p ####

Disk /dev/vdb: 5368 MB, 5368709120 bytes, 10485760 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xe5ae08db

Device Boot Start End Blocks Id System
/dev/vdb1 2048 2099199 1048576 8e Linux LVM

Command (m for help): ^C

sudo pvcreate /dev/vdb1
Physical volume "/dev/vdb1" successfully created.


sudo pvs
PV VG Fmt Attr PSize PFree
/dev/vda2 centos lvm2 a-- <9.00g 0
/dev/vdb1 lvm2 --- 1.00g 1.00g


sudo vgcreate myvg1 /dev/vdb1
Volume group "myvg_1" successfully created


sudo lvcreate -n mylv_1 -L 256M myvg1
Logical volume "mylv_1" created.


sudo lvs
LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert
root centos -wi-ao---- <8.00g
swap centos -wi-ao---- 1.00g
mylv_1 myvg_1 -wi-a----- 256.00m


 ll /dev/mapper/myvg_1-mylv_1
lrwxrwxrwx. 1 root root 7 Jan 28 21:06 /dev/mapper/myvg_1-mylv_1 -> ../dm-2

ll /dev/myvg_1/mylv_1
lrwxrwxrwx. 1 root root 7 Jan 28 21:06 /dev/myvg_1/mylv_1 -> ../dm-2


mkdir mkdir /lv_data

lsblk
 mkfs.xfs /dev/myvg_1/mylv_1

blkid

vim /etc/fstab

/dev/myvg_1/mylv_1 /lv_data xfs defaults 0 0
or
UUID="6fa210d8-f319-466a-863a-12356f133090" /lv_data xfs defaults 0 0

vgs
lvextend -r -L +100M /dev/myvg_1/mylv_1
df -h




LVM
pvcreate /dev/vdb1
vgcreate myvg1 /dev/vdb1
lvcreate -n mylv1 –L 265M myvg1
mkfs.ext4 /dev/vdb1/myvg1-mylv1
fstab

vgextend –L +600M /dev/vdb1/myvg1
lvextend –L +200M /dev/vdb1/myvg1-mylv1



################################################################################################################################################################################################
#### GNU PARTED - fdisk  sfdisk 
################################################################################################################################################################################################

$ sudo parted
$ (parted) select /dev/sdb
# (parted) print
(parted) print all


$ sudo umount /dev/sdc
$ sudo parted /dev/sdc
(parted) mklabel gpt
(parted) p
(parted) mkpart "images" ext4 1MB 2004MB
(parted) mkpart "audio files" xfs 2005MB 100%
(parted) print
Number Start End Size File system Name Flags
1 1049kB 2005MB 2004MB ext4 images
2 2006MB 4009MB 2003MB xfs audio files

################################################################################################################################################################################################
#### LDAP
################################################################################################################################################################################################
sssd krb5-workstation authconfig-gtk 🡪 logout 🡪 ssh root server –X
LDAP BASE DN : dc=example,dc=com || LDAP Server : classroom.example.com

Realm : Example.com | KDC : classroom.example.com 🡪 Admin Servers : same

authconfig-gtk ssh ldapuser7@localhost





################################################################################################################################################################################################
#### iSCSI
################################################################################################################################################################################################

🡪 LVM 🡪 targetcli pack 🡪 service 🡪 firewall port 3260/tcp 🡪 targetcli configs 🡪 initiator
Client fstab /mount xfs _netdev 🡪 iscsiadm 🡪 logout


################################################################################################################################################################################################
#### NFS
################################################################################################################################################################################################

service🡪 chown nfsnobody /my_nfs 🡪 vim /etc/exports [my_nfs x.x.x.x/24](rw sync)
Client mkdir /mnt/nfs_docs 🡪fstab server7:/ mnt/nfs_docs nfs defaults 🡪 mount

####SERVER CONFIG ###
100G & 5G nfs_share

# INSTALL NFS
$ yum install nfs-utils libnfsidmap -y 

# ENABLE NFS ON START
$ systemctl enable rpcbind
$ systemctl enable nfs-server
$ systemctl start rpcbind
$ systemctl start rpc-statd
$ systemctl start nfs-idmapd 

# firewall-cmd --permanent --add-service=nfs
# firewall-cmd --reload
# sudo systemctl stop firewalld.service

# CREATE XFS PARTITIONS
$ fdisk -l
$ fdisk /dev/sdb
 $ n #new partition
 $ p #primary partition
 $ 1 #partition number default
 $ x2 enter keys # first and last sector default
 $ w #write the changes

# MAKE THE FILE SYSTEM
$ mkfs.xfs /dev/sdbl

# CREATE NFS SHAREPOINTS
$ mkdir /nfs_shared
$ mkdir /private

# PERMISSIONS
$ ls -ald /nfs_shared
$ chown nfsnobody /nfs_shared

# MOUNT 
$ mount /dev/sdbl /nfs_shared
$ mount /dev/sdcl /private

# ADD NFS MOUNTS TO /ETC/FSTAB FOR AUTO-MOUNT
$ /dev/sdbl /nfs_shared xfs defaults 0 0
$ /dev/sdcl /private xfs defaults 0 0

# ADDING NFS_SHARE PATH ENTRIES TO /ETC/EXPORTS
/nfs_shared *(rw,sync,no_root_squash)
/private *(rw,sync,no_root_squash)

# EXPORT THE NFS NFS_SHARE
$ exportfs -rv

# LIST MOUNTS BY CURRENT HOST
$ showmount -e <hostname>



###CLIENT CONFIG ###
# CREATE MOUNT DIRECTORY
$ mkdir /mnt/server_nfs_link

# MOUNT SERVER SHARE
$ mount hostname:/nfs_share /mnt/server_nfs_link
$ df -h

# PERMENT ADDING vim /etc/fstab for auto-mount
$ <histname>:/nfs_share /mnt/nsf_link    nfs    defaults    0 0


## SECURING NFS
systemctl enable nfs-secure-server.service 
ystemctl start nfs-secure-server.service 


################################################################################################################################################################################################
#### MARIA DB
################################################################################################################################################################################################
mariadb mariadb-client 🡪 service+firewall 🡪 mysql_secure_installation
mysql -u root –p

help contents;
Client mariadb-client 🡪 service+firewall
show databases;


################################################################################################################################################################################################
#### SAMBA
################################################################################################################################################################################################

samba samba-client 🡪 service+firewall 🡪 mkdir /smb_sahre context type 🡪configs
Client cifs-utils samba-client [income ]fstab cifs credentials=mysec


# SAMBA UTILS
$ dnf install samba samba-common samba-client

# SAMBA SHARE FOLDER
$ mkdir -p /shares/smb/data1

# SAMABA PERMISSIONS
$ chmod -R 755 /shares/smb/data1
$ chown -R  nobody:nobody /shares/smb/data1
$ chcon -t samba_share_t /shares/smb/data1

# BACKUP SAMBA CONF
$ mv /etc/samba/smb.conf /etc/samba/smb.conf.bak

# CREATING A NEW SAMBA CONFIG
$ vim /etc/samba/smb.conf

[global]
workgroup = WORKGROUP
server string = Samba Server %v
netbios name = rocky-8
security = user
map to guest = bad user
dns proxy = no
ntlm auth = true


[Public]
path =  /shares/smb/data1
browsable =yes
writable = yes
guest ok = yes
read only = no

# Verify the configurations
$ testparm

# ENABLE AND START SERVICES
$ systemctl start smb
$ systemctl enable smb
$ systemctl start nmb
$ systemctl enable nmb

# STATUS
$ systemctl status smb
$ systemctl status nmb


# Open Firewall Port
$ firewall-cmd --add-service=samba
$ firewall-cmd --add-service=samba --permanent

# VERIFY FIREWALL
$ firewall-cmd --list-services

# TEST SHARE
$ cd /shares/smb/data1 | touch file{1..3}.txt


# SECURE SAMBA SHARE

# SAMBA USER CREATE
$ useradd smbuser
$ smbpasswd -a smbuser

# SAMBA GROUP CREATE
$ groupadd smb_group
$ usermod -g smb_group smbuser

# secure samba share directory for accessing files securely by samba users
$ mkdir -p /shares/smb/data2
$ chmod -R 770 /shares/smb/data2
$ chcon -t samba_share_t /shares/smb/data2
$ chown -R root:smb_group /shares/smb/data2

# ADD SECURE DIRECTORY2
$ vi /etc/samba/smb.conf

[Private]
path = /srv/tecmint/private
valid users = @smb_group
guest ok = no
writable = no
browsable = yes

# RESTART SAMBA SERVICE
$ systemctl restart smb
$ systemctl restart nmb


# access the samba share from a Linux machine
$ dnf install samba-client
$ smbclient ‘192.168.58.102\private’ -U smbuser


################################################################################################################################################################################################
#### WEBMIN | https://localhost:10000
################################################################################################################################################################################################


# DEPENDENCIES
sudo yum -y install perl perl-Net-SSLeay openssl perl-IO-Tty perl-Encode-Detect

# GET LATEST RPM
http://download.webmin.com/download/yum/?C=M;O=D
sudo dnf install -y http://download.webmin.com/download/yum/webmin-2.013-1.noarch.rpm

# FIREWALL 
sudo firewall-cmd --add-port=10000/tcp
"sudo firewall-cmd --runtime-to-permanent
"

# FOR LOCACALLY  OR EXTERNALLY 
sudo vim /etc/webmin/miniserv.conf      |||||| allow=127.0.0.1 OR YOUR ACCESS IP

# CHECK LOG
sudo cat /var/webmin/miniserv.error

# CREATE USER
sudo echo weminuser:yourpassword >> /etc/webmin/miniserv.users
echo "weminuser: bla bla  >> /etc/webmin/webmin.acl
sudo webmin passwd weminuser

#RESTART WEBMIN
sudo /etc/webmin/restart OR  sudo systemctl restart webmin

################################################################################################################################################################################################
#### X11 ###  enable X11 forwarding rom Amazon EC2 emma white  ## https://shorturl.at/VgaIj
################################################################################################################################################################################################

#### CHECK X11 STATUS
sudo cat /etc/ssh/sshd_config |grep -i X11Forwarding

## X11 Install required packages
$ sudo yum install xorg-x11-xauth -y
$ sudo yum install xclock xterm -y

# enable X11 Forwardin
$ sudo vi /etc/ssh/sshd_config
“X11Forwarding” parameter to “yes”

# Verify X11Forwarding parameter:
$ sudo cat /etc/ssh/sshd_config |grep -i X11Forwarding

# restart ssh service 
$ sudo service sshd restart 

################################################################################################################################################################################################
#### CCTV ## ISPYAGENTDVR ##  Shinobi vs Zoneminder vs Frigate vs Motioneye vs Bluecherry vs iSpy
################################################################################################################################################################################################

http://localhost:8090/index.html?v=0.895409558265448#Live

# VIEW ONLINE
rtsp://wuke:hw3a3w@192.168.1.10

# CAPTURE STREAM
ffmpeg -i rtsp://wuke:hw3a3w@192.168.1.10 -r 15 C:\cmder\703.mp4
ffmpeg -i rtsp://wuke:hw3a3w@192.168.1.10 -r 15 -c:v libx265 C:\cmder\4k.mp4


# CHCEK DOCKER PACK.YML FOR DOCKER COMPSOE

sudo apt install mysql-server
sudo add-apt-repository ppa:iconnor/zoneminder-master
sudo apt install zoneminder
sudo a2enconf zoneminder
sudo a2enmod rewrite expires headers
sudo systemctl reload apache2
sudo systemctl enable zoneminder
sudo systemctl start zoneminder



#############################################################################################
## DIAGNOSTIC
#############################################################################################

sudo dnf install openscap-scanner scap-security-guide -y


sudo oscap xccdf eval \
  --profile xccdf_org.ssgproject.content_profile_stig \
  --results /tmp/scan-results.xml \
  --report /tmp/scan-report.html \
  /usr/share/xml/scap/ssg/content/ssg-centos-stream9-xccdf.xml



## LYNIS SECURITY AUDIT
sudo dnf install lynis -y
sudo lynis audit system


## CHECK LAST REBOOT TIME
last -x -F | grep -E "shutdown|reboot" | sort -k5,5M -k6,6n





################################################################################################################################################################################################
#### ANDROID
################################################################################################################################################################################################

ARM 32 Bit  older devices armeabi-v7a
ARM 64 Bit  most devices  arm64-v8a

# CHECK THE ARM VERSION OF YOUR ANDROID PHONE @ IN A TERMINAL
uname -m   #mine ARMv8-A

# TERMIUS SD CARD PATH
mnt/media_rw/4A21-0000



###############################################################################################################################################################################

#### FOOBAR WINE ####
sudo dnf install epel-release
sudo yum install snapd
sudo systemctl enable --now snapd.socket
sudo snap install foobar2000


# dnf clean all
# dnf check
# dnf check-update
# dnf update



#### XFCE DESKTOP ####
dnf --enablerepo=epel group -y install "Xfce" "base-x"






#### FFMPEG
sudo dnf -y install https://download.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
sudo dnf config-manager --set-enabled powertools


sudo dnf install -y https://download1.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm
sudo dnf install -y https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-8.noarch.rpm


sudo dnf -y install ffmpeg  ffmpeg-devel
